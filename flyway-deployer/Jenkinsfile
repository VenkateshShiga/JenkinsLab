pipeline {
    agent any
    libraries {
        lib "jk_shared_library@main"
    }
    parameters {
        string(name: 'DB_NAME', defaultValue: '', description: 'Database name to deploy SQL code')
        string(name: 'SCHEMA_NAME', defaultValue: '', description: 'Schema managed by Flyway')
        string(name: 'DB_CONNECTION', defaultValue: '', description: 'JDBC URL for PostgreSQL DB connection')
        choice name: 'ACTION', choices: ['Info', 'Baseline', 'Migrate']
        string(name: 'VERSION', defaultValue: 'latest', description: 'Flyway deployment file version')
    }
    stages {
        stage('Clone Files') {
            steps {
                script {
                    cloneFiles()
                }
            }
        }
        stage('Retrieve Vault Credentials') {
            steps {
                script {
                    def credentials = retrieveVaultCredentials(
                    dbName: params.DB_NAME,
                    schemaName: params.SCHEMA_NAME
                    )
                    env.DB_USERNAME = credentials.username
                    env.DB_PASSWORD = credentials.password
                    echo "${credentials}"
                    // Stash the required files
                    stash name: 'Workspace-files', includes: '**/*'
                }
            }
        }
        stage('Deploy Database') {
            agent {
                docker {
                    image 'flyway/flyway:10.13'
                    args '--entrypoint=\'\''
                    reuseNode true
                }
            }
            steps {
                script {
                    // Unstash the files needed for deployment
                    unstash 'Workspace-files'
                    runFlywayMigrations(
                        dbName: params.DB_NAME,
                        schemaName: params.SCHEMA_NAME,
                        dbConnection: params.DB_CONNECTION,
                        action: params.ACTION,
                        version: params.VERSION
                    )
                }
            }
        }
    }
}
